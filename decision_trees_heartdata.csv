code
# Task 5: Decision Trees and Random Forests
# AI/ML Internship Project - Heart Disease Prediction
# Dataset Path: data/heart.csv
""
# 1. Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
""
"from sklearn.model_selection import train_test_split, cross_val_score"
"from sklearn.tree import DecisionTreeClassifier, plot_tree"
from sklearn.ensemble import RandomForestClassifier
"from sklearn.metrics import accuracy_score, classification_report, confusion_matrix"
""
# 2. Load Dataset
"df = pd.read_csv(""data/heart.csv"")"
""
# 3. Initial Data Check
"print(""Dataset Info"")"
print(df.info())
"print(""Summary Statistics"")"
print(df.describe())
"print(""Null Value Check"")"
print(df.isnull().sum())
""
# 4. Feature-Label Split
"X = df.drop(""target"", axis=1)"
"y = df[""target""]"
""
# 5. Train-Test Split
"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
""
# 6. Decision Tree (Basic)
dt = DecisionTreeClassifier(random_state=42)
"dt.fit(X_train, y_train)"
""
# 7. Visualize Full Decision Tree
"plt.figure(figsize=(20, 10))"
"plot_tree(dt, filled=True, feature_names=X.columns, class_names=[""No Disease"", ""Disease""])"
"plt.title(""Decision Tree - Full Depth"")"
plt.show()
""
# 8. Pruned Decision Tree
"dt_pruned = DecisionTreeClassifier(max_depth=4, min_samples_split=10, random_state=42)"
"dt_pruned.fit(X_train, y_train)"
""
# Visualize Pruned Tree
"plt.figure(figsize=(20, 10))"
"plot_tree(dt_pruned, filled=True, feature_names=X.columns, class_names=[""No Disease"", ""Disease""])"
"plt.title(""Decision Tree - Pruned (max_depth=4)"")"
plt.show()
""
# 9. Random Forest Model
"rf = RandomForestClassifier(n_estimators=100, random_state=42)"
"rf.fit(X_train, y_train)"
""
# 10. Model Evaluation
y_pred_dt = dt_pruned.predict(X_test)
y_pred_rf = rf.predict(X_test)
""
"print(""Model Accuracy"")"
"print(""Decision Tree (Pruned):"", accuracy_score(y_test, y_pred_dt))"
"print(""Random Forest:"", accuracy_score(y_test, y_pred_rf))"
""
# 11. Classification Reports
"print(""Classification Report - Decision Tree"")"
"print(classification_report(y_test, y_pred_dt))"
""
"print(""Classification Report - Random Forest"")"
"print(classification_report(y_test, y_pred_rf))"
""
# 12. Confusion Matrix - Random Forest
"plt.figure(figsize=(6, 4))"
"sns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt='d', cmap='Blues')"
"plt.title(""Random Forest Confusion Matrix"")"
"plt.xlabel(""Predicted"")"
"plt.ylabel(""Actual"")"
plt.show()
""
# 13. Feature Importances
"feature_imp = pd.Series(rf.feature_importances_, index=X.columns).sort_values(ascending=False)"
"print(""Feature Importances"")"
print(feature_imp)
""
"plt.figure(figsize=(10, 6))"
"sns.barplot(x=feature_imp.values, y=feature_imp.index)"
"plt.title(""Feature Importance - Random Forest"")"
"plt.xlabel(""Importance Score"")"
"plt.ylabel(""Features"")"
plt.show()
""
# 14. Cross-Validation
"dt_cv = cross_val_score(dt_pruned, X, y, cv=5)"
"rf_cv = cross_val_score(rf, X, y, cv=5)"
""
"print(""Cross-Validation Accuracy"")"
"print(""Decision Tree CV Mean:"", dt_cv.mean())"
"print(""Random Forest CV Mean:"", rf_cv.mean())"
